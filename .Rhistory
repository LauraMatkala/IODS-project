data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 3)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 3)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = clust)
lda.arrows(lda.fit, myscale = 3)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 3)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = clust)
lda.arrows(lda.fit, myscale = 3)
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 3)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, pch = classes)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 3)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 3)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = 1)
lda.arrows(lda.fit, myscale = 3)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = 27)
lda.arrows(lda.fit, myscale = 3)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.factor(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.factor(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(boston_scaled$clust)
plot(lda.fit, dimen = 2, col = classes)
lda.arrows(lda.fit, myscale = 3)
classes <- as.numeric(boston_scaled$clust)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(clust)
plot(lda.fit, dimen = 2, col = classes)
lda.arrows(lda.fit, myscale = 3)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(clust)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(clust)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
library(MASS)
data(Boston)
boston_scaled <- scale(Boston)
class(boston_scaled)
boston_scaled<-as.data.frame(boston_scaled)
km <-kmeans(boston_scaled, centers = 4)
clust<-km$cluster
lda.fit <- lda(clust~., data = boston_scaled)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(clust)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 5)
install.packages(plotly)
install.packages("plotly")
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %>% lda.fit$scaling
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd) #
str(gii)
dim(hd)
dim(gii)
summary(hd)
summary(gii)
View(gii)
View(hd)
library(FactoMineR)
data("tea")
str(tea)
dim(tea)
ggpairs(tea)
library(ggplot2)
library(FactoMineR)
data("tea")
str(tea)
dim(tea)
ggpairs(tea)
library(GGally)
library(FactoMineR)
data("tea")
str(tea)
dim(tea)
ggpairs(tea)
library(ggplot2); library(GGally); library(corrplot)
ggpairs(human)
human <- human <- read.csv(file = "data/human.csv", header = TRUE, sep = ",", row.names = 1)
str(human)
dim(human)
library(dplyr)
library(ggplot2); library(GGally); library(corrplot)
ggpairs(human)
cor(human)%>% corrplot() type = "upper"
library(ggplot2); library(GGally); library(corrplot)
ggpairs(human)
cor(human)%>% corrplot(), type = "upper"
library(ggplot2); library(GGally); library(corrplot)
ggpairs(human)
cor(human)%>% corrplot(type = "upper")
pca_human <- prcomp(human)
s <- summary(pca_human)
s
pca_pr <- round(1*s$importance[2, ]*100, digits = 1)
pca_pr
pc_lab<-paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
human_std <- scale(human)
pca_humanstd <- prcomp(human_std)
s <- summary(pca_humanstd)
s
pca_pr <- round(1*s$importance[2, ]*100, digits = 1)
pca_pr
pc_lab<-paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_humanstd, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
setwd("C:/HY-Data/MATKALA/GitHub/IODS-project")
#reading in data from online sources
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd) #hd is a dataframe with 2 integer, 4 numeric and 2 character variables
str(gii) # gii is a dataframe with 2 integer, 7 numeric and 1 character variable
dim(hd) # 195 rows, 8 columns
dim(gii) # 195 rows, 10 columns
summary(hd)
summary(gii)
#changing the variable names of datasets into something shorter
names(hd) <- c("HDI_rank","Country","HDI", "LifeEx", "ExpEdu", "MeanEdu", "GNI", "GNI_HDI_rank")
names(gii) <- c("GII_rank", "Country","GII", "MatMort", "AdoBirth", "ParlRep", "SecoEd_F", "SecoEd_M", "LaboFor_F", "LaboFor_M")
#creating two new variables to dataset gii, "SecoEd_F/SecoEd_M" and "LaboFor_F/LaboFor_M"
library(dplyr)
gii <- mutate(gii, SecoEd_FM = (SecoEd_F / SecoEd_M))
gii <- mutate(gii, LaboFor_FM = (LaboFor_F / LaboFor_M))
#joining the two datasets together by variable "Country"
hd_gii<-inner_join(hd, gii, by = "Country", suffix = c(".hd", ".gii"))
human <- hd_gii
glimpse(human) #195 observations, 19 variables
write.csv(human, file = "data/human.csv", row.names = FALSE)
#Laura Matkala/IODS course
#30.11.2017
#Data wrangling for R exercise 5, human development index of different countries, part 2.
#link to the original data wrangling file in Gihub: https://github.com/LauraMatkala/IODS-project/blob/master/data/create_human.R
#setting the working directory and reading in the data that I already have on my computer
setwd("C:/HY-Data/MATKALA/GitHub/IODS-project")
human <- read.csv(file = "data/human.csv", header = TRUE, sep = ",")
#Transforming GNI to a numeric variable (string manipulation)
library(stringr)
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
str(human$GNI) #checking the structure, and indeed the variable GNI is now numeric
#choosing which columns to keep for analysis
library(dplyr)
keep_columns <- c("Country", "SecoEd_FM", "LaboFor_FM", "ExpEdu", "LifeEx", "GNI", "MatMort", "AdoBirth", "ParlRep")
human <- dplyr::select(human, one_of(keep_columns))
#removing rows with missing values
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human <- filter(human, complete.cases(human)==TRUE)
#removing observations related to regions instead of countries
human <- human [1:155,]
#Define the row names of the data by the country names and remove the country name column from the data
rownames(human) <- human$Country
human <- select(human, -Country)
#saving the data as csv, this time with rownames
write.csv(human, file = "data/human.csv", row.names = TRUE)
#Laura Matkala/IODS course
#30.11.2017
#Data wrangling for R exercise 5, human development index of different countries, part 2.
#link to the original data wrangling file in Gihub: https://github.com/LauraMatkala/IODS-project/blob/master/data/create_human.R
#setting the working directory and reading in the data that I already have on my computer
setwd("C:/HY-Data/MATKALA/GitHub/IODS-project")
human <- read.csv(file = "data/human.csv", header = TRUE, sep = ",")
#Transforming GNI to a numeric variable (string manipulation)
library(stringr)
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
str(human$GNI) #checking the structure, and indeed the variable GNI is now numeric
#choosing which columns to keep for analysis
library(dplyr)
keep_columns <- c("Country", "SecoEd_FM", "LaboFor_FM", "ExpEdu", "LifeEx", "GNI", "MatMort", "AdoBirth", "ParlRep")
human <- dplyr::select(human, one_of(keep_columns))
#removing rows with missing values
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human <- filter(human, complete.cases(human)==TRUE)
#removing observations related to regions instead of countries
human <- human [1:155,]
#Define the row names of the data by the country names and remove the country name column from the data
rownames(human) <- human$Country
human <- dplyr::select(human, -Country)
#saving the data as csv, this time with rownames
write.csv(human, file = "data/human.csv", row.names = TRUE)
setwd("C:/HY-Data/MATKALA/GitHub/IODS-project")
#reading in data from online sources
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd) #hd is a dataframe with 2 integer, 4 numeric and 2 character variables
str(gii) # gii is a dataframe with 2 integer, 7 numeric and 1 character variable
dim(hd) # 195 rows, 8 columns
dim(gii) # 195 rows, 10 columns
summary(hd)
summary(gii)
#changing the variable names of datasets into something shorter
names(hd) <- c("HDI_rank","Country","HDI", "LifeEx", "ExpEdu", "MeanEdu", "GNI", "GNI_HDI_rank")
names(gii) <- c("GII_rank", "Country","GII", "MatMort", "AdoBirth", "ParlRep", "SecoEd_F", "SecoEd_M", "LaboFor_F", "LaboFor_M")
#creating two new variables to dataset gii, "SecoEd_F/SecoEd_M" and "LaboFor_F/LaboFor_M"
library(dplyr)
gii <- mutate(gii, SecoEd_FM = (SecoEd_F / SecoEd_M))
gii <- mutate(gii, LaboFor_FM = (LaboFor_F / LaboFor_M))
#joining the two datasets together by variable "Country"
hd_gii<-inner_join(hd, gii, by = "Country", suffix = c(".hd", ".gii"))
human <- hd_gii
glimpse(human) #195 observations, 19 variables
write.csv(human, file = "data/human.csv", row.names = FALSE)
#Laura Matkala/IODS course
#30.11.2017
#Data wrangling for R exercise 5, human development index of different countries, part 2.
#link to the original data wrangling file in Gihub: https://github.com/LauraMatkala/IODS-project/blob/master/data/create_human.R
#setting the working directory and reading in the data that I already have on my computer
setwd("C:/HY-Data/MATKALA/GitHub/IODS-project")
human <- read.csv(file = "data/human.csv", header = TRUE, sep = ",")
#Transforming GNI to a numeric variable (string manipulation)
library(stringr)
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
str(human$GNI) #checking the structure, and indeed the variable GNI is now numeric
#choosing which columns to keep for analysis
library(dplyr)
keep_columns <- c("Country", "SecoEd_FM", "LaboFor_FM", "ExpEdu", "LifeEx", "GNI", "MatMort", "AdoBirth", "ParlRep")
human <- dplyr::select(human, one_of(keep_columns))
#removing rows with missing values
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human <- filter(human, complete.cases(human)==TRUE)
#removing observations related to regions instead of countries
human <- human [1:155,]
#Define the row names of the data by the country names and remove the country name column from the data
rownames(human) <- human$Country
human <- dplyr::select(human, -Country)
#saving the data as csv, this time with rownames
write.csv(human, file = "data/human.csv", row.names = TRUE)
human <- human <- read.csv(file = "data/human.csv", header = TRUE, sep = ",", row.names = 1)
str(human)
dim(human)
library(dplyr)
library(ggplot2); library(GGally); library(corrplot)
ggpairs(human)
cor(human)%>% corrplot(type = "upper")
pca_human <- prcomp(human)
s <- summary(pca_human)
s
pca_pr <- round(1*s$importance[2, ]*100, digits = 1)
pca_pr
pc_lab<-paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
human_std <- scale(human)
pca_humanstd <- prcomp(human_std)
s <- summary(pca_humanstd)
s
pca_pr <- round(1*s$importance[2, ]*100, digits = 1)
pca_pr
pc_lab<-paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_humanstd, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
library(FactoMineR)
data("tea")
str(tea)
dim(tea)
